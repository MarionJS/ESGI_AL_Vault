// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Library.Tests.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BookFeature : object, Xunit.IClassFixture<BookFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Book.feature"
#line hidden
        
        public BookFeature(BookFeature.FixtureData fixtureData, Library_Tests_Specs_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Book", "![Book](https://upload.wikimedia.org/wikipedia/commons/9/92/Open_book_nae_02.svg)" +
                    "\r\nSimple calculator for adding **two** numbers\r\n\r\nLink to a feature: [Book](Libr" +
                    "ary.Tests.Specs/Features/Book.feature)", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Label",
                        "ReleaseDate",
                        "Support",
                        "ImageURL",
                        "Editor",
                        "Authors",
                        "Volume"});
            table1.AddRow(new string[] {
                        "Label1",
                        "16/10/1999",
                        "support",
                        "ImageURL",
                        "editor",
                        "author",
                        "0"});
            table1.AddRow(new string[] {
                        "Label2",
                        "13/07/1997",
                        "support",
                        "ImageURL",
                        "editor",
                        "author",
                        "1"});
            table1.AddRow(new string[] {
                        "Label3",
                        "14/02/1954",
                        "support",
                        "ImageURL",
                        "editor",
                        "author",
                        "2"});
#line 8
testRunner.Given("the books are", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create book")]
        [Xunit.TraitAttribute("FeatureTitle", "Book")]
        [Xunit.TraitAttribute("Description", "Create book")]
        [Xunit.TraitAttribute("Category", "mytag")]
        public virtual void CreateBook()
        {
            string[] tagsOfScenario = new string[] {
                    "mytag"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create book", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Label",
                            "ReleaseDate",
                            "Support",
                            "ImageURL",
                            "Editor",
                            "Authors",
                            "Volume"});
                table2.AddRow(new string[] {
                            "Label",
                            "24/02/2002",
                            "support",
                            "ImageURL",
                            "editor",
                            "author",
                            "3"});
#line 16
 testRunner.When("add a book", ((string)(null)), table2, "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Label",
                            "ReleaseDate",
                            "Support",
                            "ImageURL",
                            "Editor",
                            "Authors",
                            "Volume"});
                table3.AddRow(new string[] {
                            "Label1",
                            "16/10/1999",
                            "support",
                            "ImageURL",
                            "editor",
                            "author",
                            "0"});
                table3.AddRow(new string[] {
                            "Label2",
                            "13/07/1997",
                            "support",
                            "ImageURL",
                            "editor",
                            "author",
                            "1"});
                table3.AddRow(new string[] {
                            "Label3",
                            "14/02/1954",
                            "support",
                            "ImageURL",
                            "editor",
                            "author",
                            "2"});
                table3.AddRow(new string[] {
                            "Label",
                            "24/02/2002",
                            "support",
                            "ImageURL",
                            "editor",
                            "author",
                            "3"});
#line 19
 testRunner.Then("the books should be", ((string)(null)), table3, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                BookFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                BookFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
